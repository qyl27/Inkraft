plugins {
    id 'architectury-plugin' version "${architect_plugin_version}"
    id 'dev.architectury.loom' version "${architectury_loom_version}"
}

architectury {
    common(project.enabled_platforms.split(','))
}

loom {
    runConfigs.configureEach {
        ideConfigGenerated = true
    }
}

allprojects {
    apply plugin: 'architectury-plugin'
    apply plugin: 'dev.architectury.loom'
    apply plugin: 'maven-publish'

    group = 'cx.rain.mc'
    version = "${project.mod_version}+mc${project.minecraft_version}"

    architectury {
        minecraft = project.minecraft_version
    }

    loom {
        silentMojangMappingsLicense()

        accessWidenerPath = file('src/main/resources/inkraft.accesswidener')
    }

    repositories {
        maven {
            name = 'ParchmentMC'
            url = 'https://maven.parchmentmc.org'
        }

        mavenCentral()
    }

    dependencies {
        minecraft "com.mojang:minecraft:${project.minecraft_version}"
        mappings loom.layered() {
            officialMojangMappings()
            parchment("org.parchmentmc.data:parchment-${project.parchment_minecraft_version}:${project.parchment_version}@zip")
        }

        modImplementation "net.fabricmc:fabric-loader:${project.fabric_loader_version}"
        modApi "dev.architectury:architectury:${project.architectury_version}"

        implementation 'com.bladecoder.ink:blade-ink:1.1.1'
    }

    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
        options.release = 17
    }

    java {
        withSourcesJar()
    }

    jar {
        from('LICENSE') {
            rename { "${it}_${project.archivesBaseName}" }
        }
    }

    configurations {
        common
        shadowCommon
        compileClasspath.extendsFrom common
        runtimeClasspath.extendsFrom common
        developmentForge.extendsFrom common
        developmentFabric.extendsFrom common
        developmentNeoForge.extendsFrom common
        developmentQuilt.extendsFrom common
    }

    processResources {
        var resourcesToReplace = ['build.properties', 'META-INF/mods.toml', 'pack.mcmeta', 'fabric.mod.json']

        var replaceTokens = [
                mod_version: mod_version,
                minecraft_version: minecraft_version,
                forge_loader_version: forge_loader_version,
                forge_version: forge_version,
                fabric_loader_version: fabric_loader_version,
                fabric_api_version: fabric_api_version,
                neoforge_loader_version: neoforge_loader_version,
                neoforge_version: neoforge_version,
                architectury_version: architectury_version
        ]

        inputs.properties replaceTokens
        filteringCharset 'UTF-8'

        filesMatching(resourcesToReplace) {
            expand replaceTokens
        }
    }

    publishing {
        repositories {
            mavenLocal()

            maven {
                name = 'YuluoMaven'

                def ENV = System.getenv();

                def releaseUrl = 'https://maven.yuluo.dev/repository/maven-releases/'
                def snapshotUrl = 'https://maven.yuluo.dev/repository/maven-snapshots/'
                url = ENV.MOD_RELEASE ? releaseUrl : snapshotUrl

                credentials {
                    username ENV.MOD_MAVEN_USER
                    password ENV.MOD_MAVEN_PASS
                }
            }
        }
    }
}
